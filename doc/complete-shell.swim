complete-shell
==============

Command Completion for Everything

= Synopsis

  # Install complete-shell:
  git clone https://github.com/ingydotnet/complete-shell
  source /path/to/complete-shell/.activate.bash           # or .zsh or .fish

  # Search for existing complete-shell "compdef" files:
  complete-shell search

  # Install the compdef files you like:
  complete-shell install vagrant
  complete-shell install openstack

  vagrant <TAB><TAB>  # Completion should work!

  # Write your own compdef file. (See below)
  # Add/enable your compdef file:
  complete-shell add complete-somecommand

  # Learn the other complete-shell commands:
  complete-shell -h     # Quick reference
  complete-shell help   # Complete documentation

= Status

WARNING: THIS FRAMEWORK IS VERY VERY NEW.

* Only works on Bash so far
* Only tested on Mac and Ubuntu Linux so far

Pull Requests welcome!

= Description

CompleteShell adds command completion for everything, everywhere. It provides
a framework to define command completion in a simple, single file format.

CompleteShell works in:

* Bash
* zsh (coming soon)
* Fish (coming soon)

People can easily write complete-shell files for commands that don't yet have
completion and share them with the world. They can also write their own custom
files, or fine tune existing ones to their liking.

= Installation

Run these commands:

  # clone the Git repo:
  git clone https://github.com/ingydotnet/complete-shell

  # `source` the .activate file in your shell startup configuration file:
  source /path/to/complete-shell/.activate.bash   # or .zsh, .fish

That's it!

== Prerequisites

- Bash 3.2+

  Even if you don't use Bash as your shell, `complete-shell` needs it because
  it is written in Bash. Fortunately most computers have Bash 3.2+ installed.

- Git

  Git is used not only for getting compdef repos, but also for reading and
  writing to the `complete-shell` config file. It also is used for (its
  awesome) command line options parsing facility.

= Commands

- `complete-shell help`

  Display the complete-shell manpage. Same as `man complete-shell`.

  The `-h` option will display a quick reference help guide.

- `complete-shell search [<search string>]`

  Find registered compdef files that are available online.

- `complete-shell install <compdef-target>`

  Installs compdef files from git repos online. You can find these repos using
  the `search` command or use other ones that you know about. `compdef-target`
  can be a simple name (found in search) or a git repo URL.

- `complete-shell add <compdef-filepath>`

  Adds a local compdef file path to your config. It will be enabled by
  default.

- `complete-shell delete <compdef-name>`

  Delete a compdef file from your configuration.

- `complete-shell enable <compdef-name>`

  Enable a compdef. Usually only after you have disabled it.

- `complete-shell disable <compdef-name>`

  Disable a compdef (but don't delete it). Use this to turn of a specific
  command completion temporarily. Use the `enable` command to turn it back on.

- `complete-shell alias <command-name> <alias>

  This command will create an alias for an existing command that has the same
  command completion. Try making the alias `cs` for the command `complete-shell`:

    complete-shell alias complete-shell cs

- `complete-shell upgrade`

  Upgrade your `complete-shell` installation to the latest version.

- `complete-shell reactivate`

  Reloads all your compdef settings. Usually this happens automatically when it
  is supposed to, but this lets you do it by hand if you need to.

= The `compdef` File

A complete-shell command-completion-definition ("compdef" for short) file is a
minimal DSL that allows people to specify how command completion should work
for a given command:

Here is a simple example. Define a file called `complete-foo`:

  .complete-shell v0.0.1

  # Command name:
  .cmd foo

  # Command options:
  .opt --aaa
  .opt --bbb

  # Sub-commands:
  .sub bar
  .sub baz

  # Generate the command completion:
  .end

Then run:

  complete-shell add ./complete-foo

Now you have command completion for the `foo` command!

The `complete-shell` command itself comes with a compdef file that you can find
in `/path/to/complete-shell/share/complete-complete-shell`.

== compdef File Guidelines

* compdef files are named with `complete-` prefix followed by a `name`.
* The name should be either:
  * The name of the CLI command for which it adds support
  * The name of a project that has multiple commands
* A compdef file can define completions for one or more commands
* A compdef Git repo contains one or more comdef files
* A compdef file uses the syntax described in the next section

== The `compdef` Language

The compdef files are written in a simple DSL. The DSL has a set of simple
commands that all begin with a period, like `.cmd`. Blank lines and `#`
comments are supported.

The DSL happens to a common subset of the Bash, Zsh and Fish shell languages,
but compdef files should not contain any statements that are not documented by
the DSL.

The DSL is versioned and can change over time. It is designed to be forward
and backward compatible. ie People can use compdef files of any DSL version,
and authors can not worry about their compdefs breaking with future
`complete-shell` releases. Users *will* need to upgrade `complete-shell` to at
least the version of the most modern compdef file's API version that they want
to use.

== The `compdef` v0.0.1 Syntax

A compdef files consists of comments, blank lines and single-line command
statements.

This is a list of the compdef statement commands:

- `.complete-shell v0.0.1`

  The first statement in every compdef file must be `.complete-shell` and must
  have a version argument as shown above. The version is used to invoke the
  appropriate runtime support for that file.

- `.cmd <name>`

  The name of the statement for which completion is being defined. This is the
  second statement in the file. All other statement apply to this `name` until
  an `.end` statement is found.

  After an `.end` statement is found, another CLI command could be defined
  with a new `.cmd` statement.

- `.opt <--option>`

  This defines an option that applies to the CLI command.

- `.sub <subcommand name>`

  This defines a subcommand that applies to the CLI command.

- `.end`

  Every compdef definition must be terminate with a `.end` command. This
  compiles all the info into the final form needed for it to work on your
  system.

This is a very early and minimal version of the DSL. Expect it to grow much
richer over time.

== Sharing `compdef` Files

Sharing compdef files is simple. Create a Git repo for your compdef files:

  ReadMe          # Describe your repo
  complete-foo    # compdef for the foo command
  complete-bars   # compdef for the bar commands

Then push it to a public Git host, like GitHub or BitBucket.

If you want it to be found in the `complete-shell search` command, then
register it with complete-shell:

* Fork/clone https://github.com/ingydotnet/complete-shell
* Add your repo to the share/compdef-index file
* Commit and push
* Send a Pull Request
  * Or an email if you aren't comfortable with GitHub PRs
