=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim v0.1.40.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

=head1 Name

complete-shell - Command Completion for Everything

=head1 Synopsis

    # Install complete-shell:
    git clone https://github.com/ingydotnet/complete-shell
    source /path/to/complete-shell/.activate.bash           # or .zsh or .fish

    # Search for existing complete-shell "compdef" files:
    complete-shell search

    # Install the compdef files you like:
    complete-shell install vagrant
    complete-shell install openstack

    vagrant <TAB><TAB>  # Completion should work!

    # Write your own compdef file. (See below)
    # Add/enable your compdef file:
    complete-shell add complete-somecommand

    # Learn the other complete-shell commands:
    complete-shell -h     # Quick reference
    complete-shell help   # Complete documentation

=head1 Status

WARNING: THIS FRAMEWORK IS VERY VERY NEW.

=over

=item * Only works on Bash so far

=item * Only tested on Mac and Ubuntu Linux so far

=back

Pull Requests welcome!

=head1 Description

CompleteShell adds command completion for everything, everywhere. It provides
a framework to define command completion in a simple, single file format.

CompleteShell works in:

=over

=item * Bash

=item * zsh (coming soon)

=item * Fish (coming soon)

=back

People can easily write complete-shell files for commands that don't yet have
completion and share them with the world. They can also write their own custom
files, or fine tune existing ones to their liking.

=head1 Installation

Run these commands:

    # clone the Git repo:
    git clone https://github.com/ingydotnet/complete-shell

    # `source` the .activate file in your shell startup configuration file:
    source /path/to/complete-shell/.activate.bash   # or .zsh, .fish

That's it!

=head1 Commands

=over

=item C<< search [<search string>] >>

Find registered compdef files that are available online.

=item C<< install <compdef-target> >>

Installs compdef files from git repos online. You can find these repos using
the C<search> command or use other ones that you know about. C<compdef-target>
can be a simple name (found in search) or a git repo URL.

=item C<< add <compdef-filepath> >>

Adds a local compdef file path to your config. It will be enabled by default.

=item C<< delete <compdef-name> >>

Delete a compdef file from your configuration.

=item C<< enable <compdef-name> >>

Enable a compdef. Usually only after you have disabled it.

=item C<< enable <compdef-name> >>

Enable a compdef. Usually only after you have disabled it.

=item C<< disable <compdef-name> >>

Enable a compdef. Usually only after you have disabled it.

=item C<upgrade>

Upgrade your C<complete-shell> installation to the latest version.

=item C<reactivate>

Reloads all your compdef settings. Usually this happens automatically, but
this lets you do it by hand.

=back

=head1 The C<compdef> File

A complete-shell command-completion-definition ("compdef" for short) file is a
minimal DSL that allows people to specify how command completion should work
for a given command:

Here is a simple example. Define a file called C<complete-foo>:

    .complete-shell v0.0.1

    # Command name:
    .cmd foo

    # Command options:
    .opt --aaa
    .opt --bbb

    # Sub-commands:
    .sub bar
    .sub baz

    # Generate the command completion:
    .end

Then run:

    complete-shell add ./complete-foo

Now you have command completion for the C<foo> command!

The C<complete-shell> command itself comes with a compdef file that you can
find in C</path/to/complete-shell/share/complete-complete-shell>.

=head2 compdef File Guidelines

=over

=item * compdef files are named with C<complete-> prefix followed by a C<name>.

=item * The name should be either:

=over

=item * The name of the CLI command for which it adds support

=item * The name of a project that has multiple commands

=back

=item * A compdef file can define completions for one or more commands

=item * A compdef Git repo contains one or more comdef files

=item * A compdef file uses the syntax described in the next section

=back

=head2 The C<compdef> Language

The compdef files are written in a simple DSL. The DSL has a set of simple
commands that all begin with a period, like C<.cmd>. Blank lines and C<#>
comments are supported.

The DSL happens to a common subset of the Bash, Zsh and Fish shell languages,
but compdef files should not contain any statements that are not documented
by the DSL.

The DSL is versioned and can change over time. It is designed to be forward
and backward compatible. ie People can use compdef files of any DSL
version, and authors can not worry about their compdefs breaking with
future C<complete-shell> releases. Users B<will> need to upgrade C<complete-
shell> to at least the version of the most modern compdef file's API
version that they want to use.

=head2 The C<compdef> v0.0.1 Syntax

A compdef files consists of comments, blank lines and single-line command
statements.

This is a list of the compdef statement commands:

=over

=item C<.complete-shell v0.0.1>

The first statement in every compdef file must be C<.complete-shell> and must
have a version argument as shown above. The version is used to invoke the
appropriate runtime support for that file.

=item C<< .cmd <name> >>

The name of the statement for which completion is being defined. This is the
second statement in the file. All other statement apply to this C<name> until
an C<.end> statement is found.

After an C<.end> statement is found, another CLI command could be defined with
a new C<.cmd> statement.

=item C<< .opt <--option> >>

This defines an option that applies to the CLI command.

=item C<< .sub <subcommand name> >>

This defines a subcommand that applies to the CLI command.

=item C<.end>

Every compdef definition must be terminate with a C<.end> command. This
compiles all the info into the final form needed for it to work on your
system.

=back

This is a very early and minimal version of the DSL. Expect it to grow much
richer over time.

=head2 Sharing C<compdef> Files

Sharing compdef files is simple. Create a Git repo for your compdef files:

    ReadMe          # Describe your repo
    complete-foo    # compdef for the foo command
    complete-bars   # compdef for the bar commands

Then push it to a public Git host, like GitHub or BitBucket.

If you want it to be found in the C<complete-shell search> command, then
register it with complete-shell:

=over

=item * Fork/clone L<https://github.com/ingydotnet/complete-shell>

=item * Add your repo to the share/compdef-index file

=item * Commit and push

=item * Send a Pull Request

=over

=item * Or an email if you aren't comfortable with GitHub PRs

=back

=back

=cut
