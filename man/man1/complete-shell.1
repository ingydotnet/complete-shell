.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "complete-shell 1"
.TH complete-shell 1 "2015-10-16" "Generated by Swim v0.1.40" "Command Completion for Everything"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
complete-shell \- Command Completion for Everything
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 3
\&    # Install complete\-shell:
\&    git clone https://github.com/ingydotnet/complete\-shell
\&    source /path/to/complete\-shell/.activate.bash           # or .zsh or .fish
\&
\&    # Search for existing complete\-shell "compdef" files:
\&    complete\-shell search
\&
\&    # Install the compdef files you like:
\&    complete\-shell install vagrant
\&    complete\-shell install openstack
\&
\&    vagrant <TAB><TAB>  # Completion should work!
\&
\&    # Write your own compdef file. (See below)
\&    # Add/enable your compdef file:
\&    complete\-shell add complete\-somecommand
\&
\&    # Learn the other complete\-shell commands:
\&    complete\-shell \-h     # Quick reference
\&    complete\-shell help   # Complete documentation
.Ve
.SH "Status"
.IX Header "Status"
\&\s-1WARNING: THIS FRAMEWORK IS VERY VERY NEW.\s0
.IP "\(bu" 4
Only works on Bash so far
.IP "\(bu" 4
Only tested on Mac and Ubuntu Linux so far
.PP
Pull Requests welcome!
.SH "Description"
.IX Header "Description"
CompleteShell adds command completion for everything, everywhere. It provides a framework to define command completion in a simple, single file format.
.PP
CompleteShell works in:
.IP "\(bu" 4
Bash
.IP "\(bu" 4
zsh (coming soon)
.IP "\(bu" 4
Fish (coming soon)
.PP
People can easily write complete-shell files for commands that don't yet have completion and share them with the world. They can also write their own custom files, or fine tune existing ones to their liking.
.SH "Installation"
.IX Header "Installation"
Run these commands:
.PP
.Vb 2
\&    # clone the Git repo:
\&    git clone https://github.com/ingydotnet/complete\-shell
\&
\&    # \`source\` the .activate file in your shell startup configuration file:
\&    source /path/to/complete\-shell/.activate.bash   # or .zsh, .fish
.Ve
.PP
That's it!
.SS "Prerequisites"
.IX Subsection "Prerequisites"
.IP "Bash 3.2+" 4
.IX Item "Bash 3.2+"
Even if you don't use Bash as your shell, \f(CW\*(C`complete\-shell\*(C'\fR needs it because it is written in Bash. Fortunately most computers have Bash 3.2+ installed.
.IP "Git" 4
.IX Item "Git"
Git is used not only for getting compdef repos, but also for reading and writing to the \f(CW\*(C`complete\-shell\*(C'\fR config file. It also is used for (its awesome) command line options parsing facility.
.SH "Commands"
.IX Header "Commands"
.ie n .IP """complete\-shell help""" 4
.el .IP "\f(CWcomplete\-shell help\fR" 4
.IX Item "complete-shell help"
Display the complete-shell manpage. Same as \f(CW\*(C`man complete\-shell\*(C'\fR.
.Sp
The \f(CW\*(C`\-h\*(C'\fR option will display a quick reference help guide.
.ie n .IP """complete\-shell search [<search string>]""" 4
.el .IP "\f(CWcomplete\-shell search [<search string>]\fR" 4
.IX Item "complete-shell search [<search string>]"
Find registered compdef files that are available online.
.ie n .IP """complete\-shell install <compdef\-target>""" 4
.el .IP "\f(CWcomplete\-shell install <compdef\-target>\fR" 4
.IX Item "complete-shell install <compdef-target>"
Installs compdef files from git repos online. You can find these repos using the \f(CW\*(C`search\*(C'\fR command or use other ones that you know about. \f(CW\*(C`compdef\-target\*(C'\fR can be a simple name (found in search) or a git repo \s-1URL.\s0
.ie n .IP """complete\-shell add <compdef\-filepath>""" 4
.el .IP "\f(CWcomplete\-shell add <compdef\-filepath>\fR" 4
.IX Item "complete-shell add <compdef-filepath>"
Adds a local compdef file path to your config. It will be enabled by default.
.ie n .IP """complete\-shell delete <compdef\-name>""" 4
.el .IP "\f(CWcomplete\-shell delete <compdef\-name>\fR" 4
.IX Item "complete-shell delete <compdef-name>"
Delete a compdef file from your configuration.
.ie n .IP """complete\-shell enable <compdef\-name>""" 4
.el .IP "\f(CWcomplete\-shell enable <compdef\-name>\fR" 4
.IX Item "complete-shell enable <compdef-name>"
Enable a compdef. Usually only after you have disabled it.
.ie n .IP """complete\-shell disable <compdef\-name>""" 4
.el .IP "\f(CWcomplete\-shell disable <compdef\-name>\fR" 4
.IX Item "complete-shell disable <compdef-name>"
Disable a compdef (but don't delete it). Use this to turn of a specific command completion temporarily. Use the \f(CW\*(C`enable\*(C'\fR command to turn it back on.
.IP "`complete\-shell alias <command\-name> <alias>" 4
.IX Item "`complete-shell alias <command-name> <alias>"
This command will create an alias for an existing command that has the same command completion. Try making the alias \f(CW\*(C`cs\*(C'\fR for the command \f(CW\*(C`complete\-shell\*(C'\fR:
.Sp
.Vb 1
\&    complete\-shell alias complete\-shell cs
.Ve
.ie n .IP """complete\-shell upgrade""" 4
.el .IP "\f(CWcomplete\-shell upgrade\fR" 4
.IX Item "complete-shell upgrade"
Upgrade your \f(CW\*(C`complete\-shell\*(C'\fR installation to the latest version.
.ie n .IP """complete\-shell reactivate""" 4
.el .IP "\f(CWcomplete\-shell reactivate\fR" 4
.IX Item "complete-shell reactivate"
Reloads all your compdef settings. Usually this happens automatically when it is supposed to, but this lets you do it by hand if you need to.
.ie n .SH "The ""compdef"" File"
.el .SH "The \f(CWcompdef\fP File"
.IX Header "The compdef File"
A complete-shell command-completion-definition (\*(L"compdef\*(R" for short) file is a minimal \s-1DSL\s0 that allows people to specify how command completion should work for a given command:
.PP
Here is a simple example. Define a file called \f(CW\*(C`complete\-foo\*(C'\fR:
.PP
.Vb 1
\&    .complete\-shell v0.0.1
\&
\&    # Command name:
\&    .cmd foo
\&
\&    # Command options:
\&    .opt \-\-aaa
\&    .opt \-\-bbb
\&
\&    # Sub\-commands:
\&    .sub bar
\&    .sub baz
\&
\&    # Generate the command completion:
\&    .end
.Ve
.PP
Then run:
.PP
.Vb 1
\&    complete\-shell add ./complete\-foo
.Ve
.PP
Now you have command completion for the \f(CW\*(C`foo\*(C'\fR command!
.PP
The \f(CW\*(C`complete\-shell\*(C'\fR command itself comes with a compdef file that you can find in \f(CW\*(C`/path/to/complete\-shell/share/complete\-complete\-shell\*(C'\fR.
.SS "compdef File Guidelines"
.IX Subsection "compdef File Guidelines"
.IP "\(bu" 4
compdef files are named with \f(CW\*(C`complete\-\*(C'\fR prefix followed by a \f(CW\*(C`name\*(C'\fR.
.IP "\(bu" 4
The name should be either:
.RS 4
.IP "\(bu" 4
The name of the \s-1CLI\s0 command for which it adds support
.IP "\(bu" 4
The name of a project that has multiple commands
.RE
.RS 4
.RE
.IP "\(bu" 4
A compdef file can define completions for one or more commands
.IP "\(bu" 4
A compdef Git repo contains one or more comdef files
.IP "\(bu" 4
A compdef file uses the syntax described in the next section
.ie n .SS "The ""compdef"" Language"
.el .SS "The \f(CWcompdef\fP Language"
.IX Subsection "The compdef Language"
The compdef files are written in a simple \s-1DSL.\s0 The \s-1DSL\s0 has a set of simple commands that all begin with a period, like \f(CW\*(C`.cmd\*(C'\fR. Blank lines and \f(CW\*(C`#\*(C'\fR comments are supported.
.PP
The \s-1DSL\s0 happens to a common subset of the Bash, Zsh and Fish shell languages, but compdef files should not contain any statements that are not documented by the \s-1DSL.\s0
.PP
The \s-1DSL\s0 is versioned and can change over time. It is designed to be forward and backward compatible. ie People can use compdef files of any \s-1DSL\s0 version, and authors can not worry about their compdefs breaking with future \f(CW\*(C`complete\-shell\*(C'\fR releases. Users \fBwill\fR need to upgrade \f(CW\*(C`complete\-shell\*(C'\fR to at least the version of the most modern compdef file's \s-1API\s0 version that they want to use.
.ie n .SS "The ""compdef"" v0.0.1 Syntax"
.el .SS "The \f(CWcompdef\fP v0.0.1 Syntax"
.IX Subsection "The compdef v0.0.1 Syntax"
A compdef files consists of comments, blank lines and single-line command statements.
.PP
This is a list of the compdef statement commands:
.ie n .IP """.complete\-shell v0.0.1""" 4
.el .IP "\f(CW.complete\-shell v0.0.1\fR" 4
.IX Item ".complete-shell v0.0.1"
The first statement in every compdef file must be \f(CW\*(C`.complete\-shell\*(C'\fR and must have a version argument as shown above. The version is used to invoke the appropriate runtime support for that file.
.ie n .IP """.cmd <name>""" 4
.el .IP "\f(CW.cmd <name>\fR" 4
.IX Item ".cmd <name>"
The name of the statement for which completion is being defined. This is the second statement in the file. All other statement apply to this \f(CW\*(C`name\*(C'\fR until an \f(CW\*(C`.end\*(C'\fR statement is found.
.Sp
After an \f(CW\*(C`.end\*(C'\fR statement is found, another \s-1CLI\s0 command could be defined with a new \f(CW\*(C`.cmd\*(C'\fR statement.
.ie n .IP """.opt <\-\-option>""" 4
.el .IP "\f(CW.opt <\-\-option>\fR" 4
.IX Item ".opt <--option>"
This defines an option that applies to the \s-1CLI\s0 command.
.ie n .IP """.sub <subcommand name>""" 4
.el .IP "\f(CW.sub <subcommand name>\fR" 4
.IX Item ".sub <subcommand name>"
This defines a subcommand that applies to the \s-1CLI\s0 command.
.ie n .IP """.end""" 4
.el .IP "\f(CW.end\fR" 4
.IX Item ".end"
Every compdef definition must be terminate with a \f(CW\*(C`.end\*(C'\fR command. This compiles all the info into the final form needed for it to work on your system.
.PP
This is a very early and minimal version of the \s-1DSL.\s0 Expect it to grow much richer over time.
.ie n .SS "Sharing ""compdef"" Files"
.el .SS "Sharing \f(CWcompdef\fP Files"
.IX Subsection "Sharing compdef Files"
Sharing compdef files is simple. Create a Git repo for your compdef files:
.PP
.Vb 3
\&    ReadMe          # Describe your repo
\&    complete\-foo    # compdef for the foo command
\&    complete\-bars   # compdef for the bar commands
.Ve
.PP
Then push it to a public Git host, like GitHub or BitBucket.
.PP
If you want it to be found in the \f(CW\*(C`complete\-shell search\*(C'\fR command, then register it with complete-shell:
.IP "\(bu" 4
Fork/clone <https://github.com/ingydotnet/complete\-shell>
.IP "\(bu" 4
Add your repo to the share/compdef\-index file
.IP "\(bu" 4
Commit and push
.IP "\(bu" 4
Send a Pull Request
.RS 4
.IP "\(bu" 4
Or an email if you aren't comfortable with GitHub PRs
.RE
.RS 4
.RE
