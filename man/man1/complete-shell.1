.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "complete-shell 1"
.TH complete-shell 1 "2015-10-14" "Generated by Swim v0.1.40" "Command Completion for Everything"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
complete-shell \- Command Completion for Everything
.SH "Status"
.IX Header "Status"
\&\s-1WARNING: THIS FRAMEWORK IS BRAND NEW.\s0
.PP
It's really not any good yet! The \s-1API \s0\fBwill\fR change!
.IP "\(bu" 4
Only completes subcommands
.IP "\(bu" 4
Only completes 1 level
.IP "\(bu" 4
Only tested on Linux so far
.IP "\(bu" 4
Only works on Bash so far
.IP "\(bu" 4
Only supports \s-1YAML\s0 definition files so far
.PP
Stay tuned.
.PP
Pull Requests welcome!
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 3
\&    # Install a command\-completion\-definition repo from GitHub. Like Vagrant,
\&    # for example:
\&    complete\-shell install ingydotnet/vagrant
\&
\&    vagrant <TAB><TAB>
.Ve
.SH "Description"
.IX Header "Description"
CompleteShell adds command completion for everything, everywhere. It provides a framework for common shells to define completion with simple \s-1YAML\s0 or \s-1JSON\s0 files.
.PP
People can easily write completion definition files for commands that don't yet have completion and share them with the world. They can also write their own custom files, or fine tune existing ones to their liking.
.SH "Basic Usage"
.IX Header "Basic Usage"
Here is a simple example. Define a file called \f(CW\*(C`~/complete\-foo.yaml\*(C'\fR:
.PP
.Vb 10
\&    # Command name
\&    cmd: foo
\&    # Command options
\&    opt:
\&    \- \-\-aaa
\&    \- \-\-bbb
\&    # Sub\-commands
\&    sub:
\&    \- cmd: bar
\&    \- cmd: baz
.Ve
.PP
Then run:
.PP
.Vb 2
\&    complete\-shell make\-bash ~/complete\-foo.yaml
\&    complete\-shell add ~/complete\-foo.bash
.Ve
.PP
Now you have command completion for the \f(CW\*(C`foo\*(C'\fR command!
.SH "Installation"
.IX Header "Installation"
Run these commands:
.PP
.Vb 3
\&    git clone https://github.com/ingydotnet/complete\-shell
\&    # In your Shell startup configuration file:
\&    source /path/to/complete\-shell/.activate
.Ve
.PP
That's it!
.ie n .SH "The ""complete\-shell"" Command"
.el .SH "The \f(CWcomplete\-shell\fP Command"
.IX Header "The complete-shell Command"
CompleteShell adds a command called \f(CW\*(C`complete\-shell\*(C'\fR that allows you to show, add and maintain your completion files.
.PP
Here is a list of commands:
.ie n .IP """add""" 4
.el .IP "\f(CWadd\fR" 4
.IX Item "add"
Adds a complete-shell configuration file your config.
.ie n .IP """install user/complete\-repo""" 4
.el .IP "\f(CWinstall user/complete\-repo\fR" 4
.IX Item "install user/complete-repo"
Clone a definition repo from GitHub and add it.
.ie n .IP """rehash""" 4
.el .IP "\f(CWrehash\fR" 4
.IX Item "rehash"
Reloads all your completion settings. Not normally needed.
.SH "Some Completion Repos"
.IX Header "Some Completion Repos"
.ie n .IP """ingydotnet/vagrant""" 4
.el .IP "\f(CWingydotnet/vagrant\fR" 4
.IX Item "ingydotnet/vagrant"
Command completion for the Vagrant command.
.SH "Development"
.IX Header "Development"
.SH "To Do"
.IX Header "To Do"
\&...lots...
